//노드란? 
// --> 크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 언어이다.

//1. 자바스크립트 런타임

//노드 내부구조 1,2 추가

//노드는 V8과 더불어 libuv라는 라이브러리를 사용한다. 
//(V8과 libuv는 C, C++로 구현되어있다.)
//우리가 코딩한 자바스크립트 코드는 노드가 알아서 V8엔진과 libuv에 연결해준다.
//(그래서 굳이 C, C++을 구현할 필요가 없다.)

//2. 이벤트 기반
//특정 이벤트를 미리 등록해 놓으면 그 이벤트가 발생할 때 등록된 콜백 함수가 호출되어
//시스템에서 실행되는 것이다.

//이벤트 기반 사진 추가

//위의 그림대로 실행이 된다.

//3. 논블로킹I/O
//노드는 파일 시스템 접근(파일 읽기, 쓰기, 폴더만들기)나 네트워크 요청 같은 작업을
//논블로킹 방식으로 동작한다.

//4. 싱글 스레드
//자바스크립트와 노드에서 논블로킹이 중요한 이유가 바로 싱글 스레드이기 때문이다.
//한번에 한가지 일밖에 처리하지 못하므로 어떤 작업에서 블로킹이 발생하면 다음일을
//하지 못한다. 
//노드도 멀티 프로세스를 통해 멀티 스레드처럼 이용할 수 있다.
//아래의 그림을 보자

//스레드와 프로세스 그림추라

//프로세스 : 운영체제에서 할당하는 작업의 단위.
//          노드나 인터넷 브라우저 같은 프로그램은 개별적 프로세스
//          프로세스간에는 메모리등의 자원을 공유하지 않는다.
//스레드 : 프로세스 내에서 실행되는 흐름의 단위.
//         하나의 프로세스는 스레드를 여러개 가질 수 있다.
//         스레드들은 부모 프로세스의 자원을 공유한다.
//         즉 같은 메모리에 접근할 수 있다.

//노드에서는 스레드를 늘리는 대신, 프로세스 자체를 복사해 여러 작업을 동시에 처리하는 
//멀티 프로세스 방식이 있다. 
//(뒤의 4.5 cluster 모듈, 15.1.5절의 pm2 패키지에서 자세한 예를 다룰 것이다.)



/////////////////////////
//서버로서의 노드
//노드서버는 I/O가 많은 작업에 적합하다. 
//(반면 이미지나 비디오처리 대규모 데이터처리같은 CPU를 많이 사용하는 작업은 좋지 않다.)
//노드는 libuv 라이브러리를 사용해 I/O작업을 논블로킹 방식으로 처리해준다.
//(그래서 싱글 스레드로 만은 I/O를 처리할 수 있지만 CPU부하가 큰 작업에는 좋지 않다.)

//노드의 장단점
//장점 
//멀티 스레드 방식에 비해 컴터 자원 적게 사용함 | 싱글스레드라서 CPU코어를 하나만 사용
//I/O작업이 많은 서버로 적합                  | CPU 작업이 많은 서버로는 부적합
//멀티 스레드방식보다 쉽다.                  | 하나뿐인 스레드가 멈추지 않도록 관리해야한다.
//웹 서버가 내장되어있다.                    | 서버 규모가 커졌을 때 서버를 관리하기 어렵다.
//자바스크립트를 사용한다.                   | 어중간한 기능
//JSON 형식과 호환하기 쉽다.                 | 

//CPU를 많이 차지하는 작업은 AWS Lambda, Google Cloud Functions 같은 서비스에서 노드도 지원된다.