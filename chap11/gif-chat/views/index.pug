extends layout

block content
  div F12를 눌러 console 탭과 network 탭을 확인하세요.
  //- socket.io부분
  script(src='/socket.io/socket.io.js')
  //- /socket.io/socket.io.js 는 Socket.IO에서 클라이언트로 제공하는 스크립트이다.
  //- 이 스크립트를 통해 서버와 유사한 API로 웹소켓 통신이 가능하다. 
  script.
    var socket = io.connect('http://localhost:8005', {
        path: '/socket.io',
        transports: ['websocket']  //- 웹소켓을 사용하는 옵션이다 
    });
    //- 스크립트가 제공하는 io 객체에 서버 주소를 적어서 연결한다
    //- ws프로토콜이 아니라 http 프로토콜을 사용한다는점이 ws모듈과 다르다
    //- 옵션으로 path를 주었는데, 이부분이 서버의 path 옵션과 일치해야 통신이 가능하다
    //- transports에 웹소켓 값을 주면 웹소켓을 사용할 수 있다
    //- 웹소켓을 사용할 수 없는 브라우저는 저 옵션을 없애서 폴링방식으로 사용하고
    //- 웹소켓을 사용할 수 있는 브라우저는 웹소켓을 사용한다
    socket.on('news', (data)=>{
        console.log(data);
        socket.emit('reply', 'Hello Node.JS');
    });
    //- 서버에서 보내는 news이벤트를 받기 위해 news이벤트 리스너를 붙여두었다.
    //- news 이벤트가 발생하면 emit()메서드로 다시 서버에게 답장을 한다. 서버의 reply이벤트 리스너로 답장이 간다


//-  아래는 웹소켓 부분이다.
//-   script.
//-     var webSocket = new WebSocket("ws://localhost:8005");  
//-     //WebSocket생성자에 연결할 서버 주소를 넣고 websocket 객체를 생성 서버주소의 프로토콜은 ws 이다
//-     //클라이언트 역시 이벤트 기반으로 동작한다.
//-     webSocket.onopen = function () { //onopen 이벤트 : 서버와 연결이 맻어지는 경우
//-       console.log('서버와 웹소켓 연결 성공!');
//-     }
//-     webSocket.onmessage = function (event) {  //onmessage 이벤트 : 서버로부터 메시지가 오는 경우 호출됨
//-       console.log(event.data);                                   //반대로 서버로 답장을 보낼수 있다.
//-       webSocket.send('클라이언트에서 서버로 답장을 보냅니다');
//-     }